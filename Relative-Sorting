import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
	public static void main (String[] args) throws Exception
	{
	    BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(bf.readLine());
	    while(t-- > 0)
	    {
	        String s[] = bf.readLine().trim().split(" ");
	        int n = Integer.parseInt(s[0]);
	        int m = Integer.parseInt(s[1]);
	        
	        HashMap<Integer,Integer> hm = new HashMap<Integer, Integer>();
	        
	        s = bf.readLine().trim().split(" ");
	        int arr1[] = new int[n];
	        for(int i=0 ; i<n ; i++)
	        {
                arr1[i] = Integer.parseInt(s[i]);
                if(!hm.containsKey(arr1[i]))
                    hm.put(arr1[i], 1);
                else
                    hm.put(arr1[i], hm.get(arr1[i]) + 1);
	        }   
            s = bf.readLine().trim().split(" ");
            int arr2[] = new int[m];
            for(int i=0 ; i<m ; i++)
                arr2[i] = Integer.parseInt(s[i]);
                
            StringBuffer sb = new StringBuffer();
            for(int i=0 ; i<m ; i++)
            {
                if(hm.containsKey(arr2[i]))
                {
                    for(int j=0 ; j<hm.get(arr2[i]) ; j++)
                        sb.append(arr2[i] + " ");
                    hm.remove(arr2[i]);       
                }
            }
            LinkedList<Map.Entry<Integer, Integer>> list = new LinkedList<Map.Entry<Integer, Integer>>(hm.entrySet());
            Comparator<Map.Entry<Integer, Integer>> comp = new Comparator<Map.Entry<Integer, Integer>>(){
                
                public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2)
                {
                    return o1.getKey() - o2.getKey();                
                }
            };
            
            Collections.sort(list, comp);
            
            for(Map.Entry<Integer, Integer> me : list)
            {
                for(int i=0 ; i<me.getValue() ; i++)
                    sb.append(me.getKey() + " ");
            }
            
            System.out.println(sb);
	    }
	}
}
