import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    static int count(int arr[], int n)
    {
        int sum = 0;
        for(int i=0 ; i<n ; i++)
            sum += arr[i];
            
        boolean dp[][] = new boolean[n + 1][sum + 1];
        
        for(int i=0 ; i<=n ; i++)
            dp[i][0] = true;
            
        for(int i=1 ; i<=sum ; i++)
            dp[0][i] = false;
            
        for(int i=1 ; i<=n ; i++)
        {
            for(int j=1 ; j<=sum ; j++)
            {
                dp[i][j] = dp[i - 1][j];
                
                if(arr[i - 1] <= j)
                    dp[i][j] = dp[i][j] | dp[i - 1][j - arr[i- 1]];
            }
        }
        
        int diff = Integer.MAX_VALUE;
        
        for(int i=sum/2 ; i>=0 ; i--)
        {
            if(dp[n][i] == true)
            {
                diff = (sum - i) - i;
                break;
            }
        }
        
        return diff;
    }
	public static void main (String[] args) throws Exception
	{
	    BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(bf.readLine().trim());
	    while(t-- > 0)
	    {
	        int n = Integer.parseInt(bf.readLine().trim());
	        int i = 0;
	        int arr[] = new int[n];
	        
	        for(String s: bf.readLine().trim().split(" "))
	            arr[i++] = Integer.parseInt(s);
	            
	        System.out.println(count(arr, n));
	    }
	}
}
