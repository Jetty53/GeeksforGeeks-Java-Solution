import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    static int count(int arr[], int n)
    {
        int MISS[] = new int[n];
        int MDSS[] = new int[n];
        
        MISS[0] = arr[0];
        MDSS[n - 1] = arr[n - 1];
        
        for(int i=1 ; i<n ; i++)
        {
            MISS[i] = arr[i];
            for(int j=0 ; j<i ; j++)
                if(arr[j] < arr[i] && MISS[j] + arr[i] > MISS[i])
                    MISS[i] = MISS[j] + arr[i];
        }
        
        for(int i=n-2 ; i>=0 ; i--)
        {
            MDSS[i] = arr[i];
            for(int j = n-1 ; j>i ; j--)
                if(arr[j] < arr[i] && MDSS[j] + arr[i] > MDSS[i])
                    MDSS[i] = MDSS[j] + arr[i];
        }
        
        int max = Integer.MIN_VALUE;
        for(int i=0 ; i<n ; i++)
            max = Math.max(max, MISS[i] + MDSS[i] - arr[i]);
            
        return max;
    }
    
	public static void main (String[] args) throws Exception
	{
	    BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(bf.readLine().trim());
	    while(t-- > 0)
	    {
	        int n = Integer.parseInt(bf.readLine().trim());
	        int arr[] = new int[n];
	        
	        int i = 0;
	        for(String s: bf.readLine().trim().split(" "))
	            arr[i++] = Integer.parseInt(s);
	            
	        System.out.println(count(arr, n));
	    }
	}
}
