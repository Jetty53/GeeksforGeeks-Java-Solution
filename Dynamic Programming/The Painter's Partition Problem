import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    static boolean check(int arr[], int n, int k, int limit)
    {
        int painter = 1;
        int curLength = 0;
        
        for(int i=0 ; i<n ; i++)
        {
            if(curLength + arr[i] > limit)
            {
                curLength = arr[i];
                painter++;
                if(painter > k)
                    return false;
            }
            else
                curLength += arr[i];
        }
        
        return true;
    }
    
    static int minimumTime(int arr[], int n, int k)
    {
        int start = 0, end;
        int totalLength = 0;
        
        for(int i=0 ; i<n ; i++)
        {
            totalLength += arr[i];
            start = Math.max(start, arr[i]);
        }
        
        int ans = 0;
        end = totalLength;
        
        while(start <= end)
        {
            int mid = (start + end) / 2;
            
            if(check(arr, n, k, mid))
            {
                ans = mid;
                end = mid - 1;
            }
            else
                start = mid + 1;
        }
        
        return ans;
    }
    
	public static void main (String[] args) throws Exception
	{
	    BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(bf.readLine().trim());
	    while(t-- > 0)
	    {
	        String s[] = bf.readLine().trim().split(" ");
	        int k = Integer.parseInt(s[0]);
	        int n = Integer.parseInt(s[1]);
	        
	        int i = 0;
	        int arr[] = new int[n];
	        for(String str: bf.readLine().trim().split(" "))
	            arr[i++] = Integer.parseInt(str);
	            
	        System.out.println(minimumTime(arr, n, k));
	    }
	}
}
